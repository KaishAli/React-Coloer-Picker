{"version":3,"sources":["components/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","state","showPicker","color","r","g","b","a","onClick","_this","setState","onClose","onChange","rgb","styles","reactCSS","default","width","height","backgroundRadius","background","concat","this","popover","position","zIndex","cover","top","right","bottom","left","swatch","padding","borderRadius","cursor","display","boxShadow","react_default","createElement","style","es","React","Component","App","className","components_ColorPicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAgFeA,6MA3EbC,MAAQ,CACNC,YAAY,EACZC,MAAO,CACLC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,EAAG,QAGPC,QAAU,WACRC,EAAKC,SAAS,CACZR,YAAaO,EAAKR,MAAMC,gBAI5BS,QAAU,WACRF,EAAKC,SAAS,CACZR,YAAY,OAIhBU,SAAW,SAACT,GACVM,EAAKC,SAAS,CACZP,MAAOA,EAAMU,+EAKf,IAAMC,EAASC,IAAS,CACtBC,QAAS,CACPb,MAAO,CACLc,MAAO,QAEPC,OAAQ,OACRC,iBAAkB,MAClBC,WAAU,QAAAC,OAAUC,KAAKrB,MAAME,MAAMC,EAA3B,MAAAiB,OAAiCC,KAAKrB,MAAME,MAAME,EAAlD,MAAAgB,OAAwDC,KAAKrB,MAAME,MAAMG,EAAzE,MAAAe,OAA+EC,KAAKrB,MAAME,MAAMI,EAAhG,MAEZgB,QAAS,CACPC,SAAU,WACVC,OAAQ,KAEVC,MAAO,CACLF,SAAU,QACVG,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,KAAM,OAERC,OAAQ,CACNC,QAAS,MACTZ,WAAY,UACZa,aAAc,MACdC,OAAQ,UACRC,QAAS,eACTC,UAAW,+BAKjB,OACEC,EAAA9B,EAAA+B,cAAA,WACED,EAAA9B,EAAA+B,cAAA,OAAKC,MAAOzB,EAAOiB,OAAQvB,QAASc,KAAKd,SACvC6B,EAAA9B,EAAA+B,cAAA,OAAKC,MAAOzB,EAAOX,SAEpBmB,KAAKrB,MAAMC,WACVmC,EAAA9B,EAAA+B,cAAA,OAAKC,MAAOzB,EAAOS,SACjBc,EAAA9B,EAAA+B,cAAA,OAAKC,MAAOzB,EAAOY,MAAOlB,QAASc,KAAKX,UACxC0B,EAAA9B,EAAA+B,cAACE,EAAA,EAAD,CAAcrC,MAAOmB,KAAKrB,MAAME,MAAOS,SAAUU,KAAKV,YAEtD,aAtEc6B,IAAMC,WCQjBC,MARf,WACE,OACEN,EAAA9B,EAAA+B,cAAA,OAAKM,UAAU,iBACXP,EAAA9B,EAAA+B,cAACO,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOf,EAAA9B,EAAA+B,cAACe,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92bf0b9e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport reactCSS from \"reactcss\";\r\n\r\nclass ColorPicker extends React.Component {\r\n  state = {\r\n    showPicker: false,\r\n    color: {\r\n      r: \"225\",\r\n      g: \"155\",\r\n      b: \"99\",\r\n      a: \"2\",\r\n    },\r\n  };\r\n  onClick = () => {\r\n    this.setState({\r\n      showPicker: !this.state.showPicker,\r\n    });\r\n  };\r\n\r\n  onClose = () => {\r\n    this.setState({\r\n      showPicker: false,\r\n    });\r\n  };\r\n\r\n  onChange = (color) => {\r\n    this.setState({\r\n      color: color.rgb,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const styles = reactCSS({\r\n      default: {\r\n        color: {\r\n          width: \"100px\",\r\n          \r\n          height: \"20px\",\r\n          backgroundRadius: \"3px\",\r\n          background: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\r\n        },\r\n        popover: {\r\n          position: \"absolute\",\r\n          zIndex: \"3\",\r\n        },\r\n        cover: {\r\n          position: \"fixed\",\r\n          top: \"0px\",\r\n          right: \"0px\",\r\n          bottom: \"0px\",\r\n          left: \"0px\",\r\n        },\r\n        swatch: {\r\n          padding: \"6px\",\r\n          background: \"#ffffff\",\r\n          borderRadius: \"2px\",\r\n          cursor: \"pointer\",\r\n          display: \"inline-block\",\r\n          boxShadow: \"0 0 0 1px rgba(0,0,0,.2)\",\r\n        },\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div style={styles.swatch} onClick={this.onClick}>\r\n          <div style={styles.color} />\r\n        </div>\r\n        {this.state.showPicker ? (\r\n          <div style={styles.popover}>\r\n            <div style={styles.cover} onClick={this.onClose} />\r\n            <SketchPicker color={this.state.color} onChange={this.onChange} />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPicker;\r\n","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'; \r\nimport ColorPicker from './components/ColorPicker'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App container\">\r\n        <ColorPicker/>  \r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}